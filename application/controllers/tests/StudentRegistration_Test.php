<?php

/**
 * CourseHour class(on /data_types) test class.
 * Provide unit tests for the CourseHour class methods.
 * Remember to call your test methods in the index method to run them in the test report
 * To access the report generated by these tests, type on the URL: '../courseClass_test'
 */

require_once(APPPATH."/data_types/StudentRegistration.php");
require_once(APPPATH."/exception/StudentRegistrationException.php");

class StudentRegistration_Test extends CI_Controller{

    public function __construct(){
        parent::__construct();
        $this->load->library('unit_test');
        $this->unit->use_strict(TRUE);
    }

/*Valid entries test set*/

    public function shouldInstantiate(){

        try{
            $registration = new StudentRegistration();
        }catch (StudentRegistrationException $caughtException){
            $registration = FALSE;
        }

        $test_name = "Test the class constructor generating a new enrollment";

        $this->unit->run($registration, "is_object", $test_name);
    }

    public function shouldGenerateRegistrationWithRightLength(){

        try{
            $studentRegistration = new StudentRegistration();

            $registration = $studentRegistration->getRegistration();
            $registrationLength = strlen($registration);
        }catch (StudentRegistrationException $caughtException){
            $registrationLength = 0;
        }

        $test_name = "Test if generates a right length registration number";

        $this->unit->run($registrationLength, 9, $test_name);
    }

    public function shouldReturnFormattedRegistration(){

        try{
            $studentRegistration = new StudentRegistration();

            $formattedRegistration = $studentRegistration->getFormattedRegistration();
            $registrationLength = strlen($formattedRegistration);

            $slash = $formattedRegistration[2];
        }catch (StudentRegistrationException $caughtException){
            $registrationLength = 0;
            $slash = "";
        }

        $test_name_1 = "Test if generates a right length formatted registration";
        $test_name_2 = "Test if the formatted registration has slash";

        $this->unit->run($registrationLength, 10, $test_name_1);
        $this->unit->run($slash, "/", $test_name_2);
    }

    public function shouldInstantiateWithGivenRegistration(){

        $validRegistration = "130020755";

        try{
            $studentRegistration = new StudentRegistration($validRegistration);

            $registration = $studentRegistration->getRegistration();
        }catch (StudentRegistrationException $caughtException){

            $registration = FALSE;
        }

        $test_name = "Test if creates a student registration with given valid registration";

        $this->unit->run($registration, $validRegistration, $test_name);
    }

    public function shouldNotInstantiateWithEmptyRegistration(){

        $invalidRegistration = "";

        try{
            $studentRegistration = new StudentRegistration($invalidRegistration);

            $registration = $studentRegistration->getRegistration();
        }catch (StudentRegistrationException $caughtException){

            $registration = FALSE;
        }

        $test_name = "Test if do not create with an empty registration given";

        $this->unit->run($registration, "is_false", $test_name);
    }

    public function shouldNotInstantiateWithNullRegistration(){

        $invalidRegistration = NULL;

        try{
            $studentRegistration = new StudentRegistration($invalidRegistration);

            $registration = $studentRegistration->getRegistration();
        }catch (StudentRegistrationException $caughtException){

            $registration = FALSE;
        }

        $test_name = "Test if do not create with an empty registration given";

        $this->unit->run($registration, "is_false", $test_name);
    }

    public function shouldNotInstantiateWithNonNumbersRegistration(){

        $invalidRegistration = "a2sd32*92";

        try{
            $studentRegistration = new StudentRegistration($invalidRegistration);

            $registration = $studentRegistration->getRegistration();
        }catch (StudentRegistrationException $caughtException){

            $registration = FALSE;
        }

        $test_name = "Test if do not create with a non number registration given";

        $this->unit->run($registration, "is_false", $test_name);
    }

    public function shouldNotInstantiateWithLongRegistration(){

        $invalidRegistration = "1234567890";

        try{
            $studentRegistration = new StudentRegistration($invalidRegistration);

            $registration = $studentRegistration->getRegistration();
        }catch (StudentRegistrationException $caughtException){

            $registration = FALSE;
        }

        $test_name = "Test if do not create with long registration given";

        $this->unit->run($registration, "is_false", $test_name);
    }

    public function shouldNotInstantiateWithShortRegistration(){

        $invalidRegistration = "12345678";

        try{
            $studentRegistration = new StudentRegistration($invalidRegistration);

            $registration = $studentRegistration->getRegistration();
        }catch (StudentRegistrationException $caughtException){

            $registration = FALSE;
        }

        $test_name = "Test if do not create with long registration given";

        $this->unit->run($registration, "is_false", $test_name);
    }

    public function index(){

        // Set this to TRUE to run the tests
        $this->unit->active(TRUE);

        /* Call your test functions here */
        $this->shouldInstantiate();
        $this->shouldGenerateRegistrationWithRightLength();
        $this->shouldReturnFormattedRegistration();
        $this->shouldInstantiateWithGivenRegistration();
        $this->shouldNotInstantiateWithEmptyRegistration();
        $this->shouldNotInstantiateWithNullRegistration();
        $this->shouldNotInstantiateWithNonNumbersRegistration();
        $this->shouldNotInstantiateWithLongRegistration();
        $this->shouldNotInstantiateWithShortRegistration();

        $test_report = array('unit_report' => $this->unit->report());

        $this->load->view('StudentRegistration_test_report', $test_report);
    }

}
